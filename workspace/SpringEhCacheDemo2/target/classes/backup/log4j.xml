<?xml version="1.0" encoding="UTF-8"?>
<!-- <!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd"> -->
<!DOCTYPE log4j:configuration SYSTEM "http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- 
	
	######## log4j pattern(패턴) ##########
	 
	%p : 로그 레벨(debug, info, warn, error, fatal)의 priority(디버깅시 출력 우선권)가 출력됨.
	%m : 로그 내용이 출력.
	%d : 로그 이벤트가 발생한 시간을 기록.
	  ex) %d{HH:mm:ss, SSS}, %d{yyyy MMM dd HH:mm:ss, SSS}
	  : Java의 SimpleDateFormat의 클래스에 따른 포맷(format) 적용
	  
		- %d{ABSOLUTE}
		- %d{DATE}
		- %d{ISO8601}

	%t : 로그 이벤트가 발생된 스레드(thread)명을 출력.
	%% : % 표시 출력.
	%n : 플랫폼 종속적인 개행문자(줄바꿈)가 출력.
	%c : 카테고리(category)를 표시.
	 ex) 카테고리가 a.b.c 처럼 되어있다면 %c{2}는 b.c가 출력.
	 
	%C : 클래스명(class)을 표시. 
	 ex) 만약 클래스의 패키지 구조가 com.javateam.project.DemoClass 라고 한다면  
	     %C{2}는 project.DemoClass 가 출력됨.
	 
	%F : 로그가 발생한 프로그램 파일(File)명.
	%l : 로그가 발생한 호출자(caller)의 정보.
	%L : 로그가 발생한 호출자(caller)의 라인수(line)를 나타냅니다
	%M : 로그가 발생한 메서드(method) 이름을 나타냅니다.
	%r : 프로그램 시작 이후 부터 로그가 발생한 시점의 시간(milliseconds : 밀리초)
	%x : 로그가 발생한 스레드(thread)와 관련된 NDC(nested diagnostic context)를 출력.
	%X : 로그가 발생한 스레드(thread)와 관련된 MDC(mapped diagnostic context)를 출력. %X{key} 형태.
	
	참고) NDC & MDC : https://cwiki.apache.org/confluence/display/LOGGINGLOG4J/NDCvsMDC
	http://egloos.zum.com/charmpa/v/2543451
	
	- 공백(whitespace) 패딩 관련
	%5p : 우측 정렬로 로그 레벨을 남김. 로그 레벨이 5글자가 안되면 왼쪽에 공백을 추가하여 5글자 맞춤.
	%-5p : 좌측 정렬. 

	-->

	<!-- Appenders -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<!-- <param name="ConversionPattern" value="%-5p: %c - %m%n" /> -->
			<param name="ConversionPattern" value="%d %p %h [%c] - %m %n" />
		</layout>
	</appender>
	
	<!-- Application Loggers -->
	<logger name="com.javateam.SpringEhCacheDemo">
		<level value="debug" />
	</logger>
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>
	
	<!-- log4jdbc : SQL Logger -->
	<!-- 
	
	###### 해당 로그(log) 항목 설명 ########
	 
	jdbc.sqlonly : SQL 문장만 로그 기록. 
			PreparedStatement일 경우 관련된 argument(인자) 값으로 대체된 SQL문이 출력. 

    jdbc.sqltiming : SQL문과 해당 SQL에 대한 실행 시간 정보(milliseconds)를 포함.
    jdbc.audit : ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 기록. 
    			다량의 로그가 생성되므로 JDBC 관련 문제를 추적(trace)해야 할 필요가 있는 경우에 적합하며 
    			그외의 경우에는 사용 비권장.

    jdbc.resultset : ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 기록. 방대한 양의 로그 기록됨. 
    jdbc.resultsettable : SQL 결과 조회된 데이터 table을 로그 기록.
	 -->
	
	<logger name="jdbc.sqltiming" additivity="false">
		<level value="warn" />
		<appender-ref ref="console"/> 
	</logger>

	<logger name="jdbc.sqlonly" additivity="false"> 
		<level value="info"/> 
		<appender-ref ref="console"/> 
	</logger>

	<logger name="jdbc.audit" additivity="false"> 
		<level value="warn"/>  
		<appender-ref ref="console"/> 
	</logger> 

	<logger name="jdbc.resultset" additivity="false">
		<level value="warn" />
		<appender-ref ref="console"/> 
	</logger>

	<logger name="jdbc.resultsettable" additivity="false"> 
		<level value="info"/>  
		<appender-ref ref="console"/> 
	</logger> 

	<!-- Root Logger -->
	<root>
		<priority value="warn" />
		<appender-ref ref="console" />
	</root>
	
</log4j:configuration>
