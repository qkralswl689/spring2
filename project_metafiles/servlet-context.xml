<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	
	<!-- CSS -->
	<resources mapping="/css/**" location="/resources/css/" />
	
	<!-- custom javascript -->
	<resources mapping="/custom/**" location="/resources/js/custom/" />
	
	<!-- jQuery -->
	<resources mapping="/jQuery/**" location="/resources/js/jQuery/" />
	
	<!-- AngularJS -->
	<resources mapping="/angularjs/**" location="/resources/js/angularjs/" />
	
	<!-- bootstrap -->
	<resources mapping="/bootstrap/**" location="/resources/js/bootstrap/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
    <!-- <beans:bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver"> -->
    
    <!-- since Spring 4.2 -->
    <beans:bean id="contentNegotiationManager" 
    		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
       
        <!-- <beans:property name="defaultContentType" value="application/json" /> -->
        <beans:property name="defaultContentType" value="text/html" />
     
        <!-- 사용할 front media contentType 지정 -->
        <beans:property name="mediaTypes">
            <beans:map>
              <beans:entry key="html" value="text/html"/>
              <beans:entry key="json" value="application/json"/>
            </beans:map>
        </beans:property>
        
    </beans:bean>

	<beans:bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
	     
        <beans:property name="contentNegotiationManager" ref="contentNegotiationManager"/>
        	
        <beans:property name="viewResolvers">
            <beans:list>
              
				<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/>

				<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
				  <beans:property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
				  <!-- <beans:property name="prefix" value="/WEB-INF/jsp/"/> -->
				  <beans:property name="prefix" value="/"/>
				  <beans:property name="suffix" value=".jsp"/>
				  <beans:property name="order" value="2" />
				</beans:bean>
			  
			  	<!-- Apache Tiles --><!-- 우선 순위 적용 : 최우선-->
				<!--
				<beans:bean id="tilesViewResolver"
					class="org.springframework.web.servlet.view.UrlBasedViewResolver">
					<beans:property name="viewClass"
						value="org.springframework.web.servlet.view.tiles3.TilesView" />
					<beans:property name="order" value="1" />
				</beans:bean>

				<beans:bean id="tilesConfigurer"
					class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
					<beans:property name="definitions">
						<beans:list>
							<beans:value>/WEB-INF/tiles/tiles-def.xml</beans:value>
						</beans:list>
					</beans:property>
				</beans:bean>
                -->
				
            </beans:list>
        </beans:property>
     
        <!-- 위에서 지정된 media에서 다루지 못한 media를 다루는 ViewResolver -->
        <beans:property name="defaultViews">
            <beans:list>
              
              <!-- deprecated : since Spring 4.3 부터 대체됨 -->
              <!-- <beans:bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" /> -->
              <beans:bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />
            </beans:list>
        </beans:property>
     
    </beans:bean>
	
	<!-- components path : (rest)controller, dao, service etc -->
	<context:component-scan base-package="프로젝트 context 패키지">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.RestController"/>
	</context:component-scan>

	
	<!-- Fileupload : 파일 관리자 id(multipartResolver)는 가급적 그대로 사용할 것! -->    
    <!-- <beans:bean id="multipartResolver"
                class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
                  <beans:property name="maxUploadSize" value="52428800" />  
    </beans:bean>   -->        
     
    <!-- File repository : 파일 저장소 -->  
    <!-- <beans:bean id="uploadDirResource" class="org.springframework.core.io.FileSystemResource">
        <beans:constructor-arg>
           <beans:value>파일 저장 폴더</beans:value>
        </beans:constructor-arg>
    </beans:bean> -->
	
</beans:beans>